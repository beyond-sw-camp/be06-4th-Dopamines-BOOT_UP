pipeline {
  agent any

  stages {

    stage('clone repository'){
      steps {
        echo "Cloning Repository"
          git branch: 'develop', url: 'https://github.com/beyond-sw-camp/be06-4th-SYNergy.git'
      }
    }
    stage('build'){
      steps {
        echo "${pwd()}"
        echo "Add Permission"
            sh 'chmod +x ./backend/gradlew'
            echo "Gradle Build"

            sh '''
              cd ./backend
              ./gradlew bootjar
            '''
      }
    }
    stage('Docker Build') {
      steps {
        sh "docker build -f cicd/docker/backend/Dockerfile --tag ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ."
        echo "tag: ${env.BUILD_NUMBER}"

      }
    }
    stage('Docker Login & Push') {
      steps {
        echo "Logging into Docker"
        sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USER} --password-stdin"
        echo "Pushing Docker Image"
        sh "docker push ${DOCKER_IMAGE}:${env.BUILD_NUMBER}"
      }
    }
    stage('SSH transfer') {
        steps {
            script {
                def isOdd = (BUILD_ID.toInteger() % 2 != 0)
                def deploymentFile = isOdd ? 'Deployment-blue.yml' : 'Deployment-green.yml'
                def newSelector = isOdd ? 'blue' : 'green'
                def currentSelector = isOdd ? 'green' : 'blue'

                def serviceName = 'backend-svc'
                def deploymentName = isOdd ? 'backend-deployment-blue' : 'backend-deployment-green'
                def otherDeploymentName = isOdd ? 'backend-deployment-green' : 'backend-deployment-blue'

                sshPublisher(
                    continueOnError: false,
                    failOnError: true,
                    publishers: [
                        sshPublisherDesc(
                            configName: "kube-master",
                            verbose: true,
                            transfers: [
                                sshTransfer(
                                    sourceFiles: "cicd/k8s/backend/${deploymentFile}",
                                    remoteDirectory: "/home/test/",
                                    execCommand: """


                                        sed -i "s/latest/${env.BUILD_NUMBER}/g" /home/test/cicd/k8s/backend/${deploymentFile}
                                        kubectl apply -f /home/test/cicd/k8s/backend/${deploymentFile}
                                        kubectl scale deployment ${deploymentName} --replicas=2
//                                         {
                                         kubectl wait --for=condition=ready pod -l deployment=${deploymentName} --timeout=120s
                                        kubectl patch service ${serviceName} -p '{"spec":{"selector":{"deployment":"${newSelector}","type":"backend"}}}'
                                        kubectl scale deployment ${otherDeploymentName} --replicas=0
//                                         } || {
//                                         kubectl patch service ${serviceName} -p '{\"spec\":{\"selector\":{\"deployment\":\"${currentSelector}\",\"type\":\"backend\"}}}'
//                                         }



                                    """

                                )
                            ]
                        )
                    ]
                )
            }
        }
    }
  }
}


