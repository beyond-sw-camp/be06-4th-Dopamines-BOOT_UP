pipeline {
  agent any
  stages {
    stage('git clone') {
      steps {
        git branch: 'frontend/*', url: 'https://github.com/beyond-sw-camp/be06-4th-SYNergy'
      }
    }
    stage('npm install & build') {
      steps {
        dir('frontend') {
          sh "npm install"
          sh "npm run build"
        }
      }
    }
    stage('Docker Push') {
      steps {
        script {pipeline {
                  agent any
                  stages {
                    stage('git clone') {
                      steps {
                        git branch: 'frontend/*', url: 'https://github.com/beyond-sw-camp/be06-4th-SYNergy'
                      }
                    }
                    stage('npm install & build') {
                      steps {
                        dir('frontend') {
                          sh "npm install"
                          sh "npm run build"
                        }
                      }
                    }
                    stage('Docker Push') {
                      steps {
                        script {
                          // Docker build
                          sh "docker build --tag ${DOCKER_IMAGE}:${env.BUILD_NUMBER}"
                          //Docker Login
                          sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USER} --password-stdin"
                          //Docker imageHub push
                          sh "docker push ${DOCKER_IMAGE}:${env.BUILD_NUMBER}"
                        }
                      }
                    }
                    // SSH 전송
                    stage('SSH transfer') {
                      steps {
                        // SSH 전송 플러그인 사용
                        sshPublisher(
                          continueOnError: false,
                          failOnError: true,
                          publishers: [
                            sshPublisherDesc(
                              configName: "k8s-master",
                              verbose: true,
                              transfers: [
                                sshTransfer(
                                  // 전송할 파일 지정
                                  sourceFiles: "cicd/k8s/frontend/frontend-deployment.yml",
                                  // 원격 디렉토리 지정 ( 원격서버로 파일을 전송할 위치 )
                                  remoteDirectory: "/home/test/",
                                  // 전송 후 야멜 파일의 VERSION을 파이프라인 빌드 숫자로 변경
                                  // frontend-deployment 야멜 파일 실행
                                  execCommand: '''
                                    # $BUILD_ID의 값이 짝수인지 홀수인지 확인
                                    if [ $((${env.BUILD_NUMBER} % 2)) -eq 0 ]; then
                                      # 짝수일 경우, green deployment 이미지 버전 변경
                                      sed -i "s/latest/${env.BUILD_NUMBER}/g" "cicd/k8s/frontend/Deployment-green.yml"
                				      kubectl apply -f "cicd/k8s/frontend/deployment-green.yml"

                				      # green의 scale을 2로 변경
                                      kubectl scale deployment frontend-deployment-green --replicas=2
                                      kubectl apply -f "cicd/k8s/frontend/deployment-green.yml"

                                      #없애서 테스트해보기
                                      kubectl patch service "frontend-svc" -p '{"spec":{"selector":{"deployment":"green","type":"frontend"}}}'

                                      # blue의 scale을 0으로 변경
                                      kubectl scale deployment frontend-deployment-blue --replicas=0
                                      kubectl apply -f "cicd/k8s/frontend/frontend-deployment-blue.yml"
                                    else
                                      # 홀수일 경우, blue deployment 이미지 버전 변경
                                      sed -i "s/latest/${env.BUILD_NUMBER}/g" "cicd/k8s/frontend/deployment-blue.yml"
                				      kubectl apply -f "cicd/k8s/frontend/deployment-blue.yml"

                				      # blue의 scale을 2로 변경
                                      kubectl scale deployment frontend-deployment-blue --replicas=2
                                      kubectl apply -f "cicd/k8s/frontend/deployment-blue.yml"

                                      kubectl patch service "frontend-svc" -p '{"spec":{"selector":{"deployment":"blue","type":"frontend"}}}'

                				      # green의 scale을 0으로 변경
                                      kubectl scale deployment frontend-deployment-green --replicas=0
                                      kubectl apply -f "cicd/k8s/frontend/frontend-deployment-green.yml"

                                    '''
                                )
                              ]
                            )
                          ]
                        )
                      }
                    }
                  }
                }
          // Docker build
          sh "docker build --tag ${DOCKER_IMAGE}:${env.BUILD_NUMBER}"
          //Docker Login
          sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USER} --password-stdin"
          //Docker imageHub push
          sh "docker push ${DOCKER_IMAGE}:${env.BUILD_NUMBER}"
        }
      }
    }
    // SSH 전송
    stage('SSH transfer') {
      steps {
        // SSH 전송 플러그인 사용
        sshPublisher(
          continueOnError: false,
          failOnError: true,
          publishers: [
            sshPublisherDesc(
              configName: "k8s-master",
              verbose: true,
              transfers: [
                sshTransfer(
                  // 전송할 파일 지정
                  sourceFiles: "cicd/k8s/frontend/frontend-deployment.yml",
                  // 원격 디렉토리 지정 ( 원격서버로 파일을 전송할 위치 )
                  remoteDirectory: "/home/test/",
                  // 전송 후 야멜 파일의 VERSION을 파이프라인 빌드 숫자로 변경
                  // frontend-deployment 야멜 파일 실행
                  execCommand: '''
                    # $BUILD_ID의 값이 짝수인지 홀수인지 확인
                    if [ $((${env.BUILD_NUMBER} % 2)) -eq 0 ]; then
                      # 짝수일 경우, green deployment 이미지 버전 변경
                      sed -i "s/latest/${env.BUILD_NUMBER}/g" "cicd/k8s/frontend/Deployment-green.yml"
				      kubectl apply -f "cicd/k8s/frontend/deployment-green.yml"

				      # green의 scale을 2로 변경
                      kubectl scale deployment frontend-deployment-green --replicas=2
                      kubectl apply -f "cicd/k8s/frontend/deployment-green.yml"

                      #없애서 테스트해보기
                      kubectl patch service "frontend-svc" -p '{"spec":{"selector":{"deployment":"green","type":"frontend"}}}'

                      # blue의 scale을 0으로 변경
                      kubectl scale deployment frontend-deployment-blue --replicas=0
                      kubectl apply -f "cicd/k8s/frontend/frontend-deployment-blue.yml"
                    else
                      # 홀수일 경우, blue deployment 이미지 버전 변경
                      sed -i "s/latest/${env.BUILD_NUMBER}/g" "cicd/k8s/frontend/deployment-blue.yml"
				      kubectl apply -f "cicd/k8s/frontend/deployment-blue.yml"

				      # blue의 scale을 2로 변경
                      kubectl scale deployment frontend-deployment-blue --replicas=2
                      kubectl apply -f "cicd/k8s/frontend/deployment-blue.yml"

                      kubectl patch service "frontend-svc" -p '{"spec":{"selector":{"deployment":"blue","type":"frontend"}}}'

				      # green의 scale을 0으로 변경
                      kubectl scale deployment frontend-deployment-green --replicas=0
                      kubectl apply -f "cicd/k8s/frontend/frontend-deployment-green.yml"

                    '''
                )
              ]
            )
          ]
        )
      }
    }
  }
}